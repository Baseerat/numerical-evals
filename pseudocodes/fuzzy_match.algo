def fuzzy_match (
    leafs,
    leaf_to_rule_map,
    max_rules_per_leaf,
    max_bitmaps,
    max_leafs_per_bitmap,
    redundancy_per_bitmap )

    leaf_count = len(leafs)

    if leaf_count <= max_bitmaps:
        return

    combinations = a list of combinations of leafs with bitwise or of their bitmap and hamming distances (e.g.,
                   combinations[2] gives a list of pairs of leafs and their bitmap and hamming distance
                   (leafs, (bitmap, hamming distance))

    # Note: hamming distance is calculated as follows:
    #     combination_bitmap = bitwise_or(leaf['bitmap'] for leaf in combination_leafs)
    #     hamming_distance = sum([popcount(combination_bitmap ^ leaf['bitmap']) for leaf in combination_leafs])

    # Note: for random_fuzzy_match algorithm, we drop first element of each combinations list with 1/3 probability,
    # except the first combinations list (i.e., combinations[1] having only one leaf)

    seen_leafs = set()

    for i in range(max_bitmaps):

        j = max_leafs_per_bitmap

        while True:

            combination = combinations[j - 1]

            if len(combination) > 0:

                combination_leafs, (combination_bitmap, _) = combination[0]

                if combination_leafs in seen_leafs:

                    combinations[j - 1] = combination[1:]  # Dropping current combination

                    continue

                for leaf in combination_leafs:

                    leaf['has_bitmap'] = True

                    leaf['~bitmap'] = combination_bitmap ^ leaf['bitmap']

                seen_leafs |= set(leafs)

                combinations[j - 1] = combination[1:]

                break

            else:

                j -= 1

    remaining_leafs = set(leafs) - seen_leafs

    default_bitmap = 0

    for leaf in remaining_leafs:

        if leaf_to_rule_map[leaf] < max_rules_per_leaf:

            leaf['has_rule'] = True

            leaf_to_rule_map[leaf] += 1

        else:

            default_bitmap |= leaf['bitmap']

    for leaf in remaining_leafs:

        if ('has_bitmap' and 'has_rule') not in leaf:

            leaf['~bitmap'] = default_bitmap ^ leaf['bitmap']

    return leafs, leaf_to_rule_map, default_bitmap
