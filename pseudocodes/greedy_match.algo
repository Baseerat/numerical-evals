def greedy_match (
    leafs,
    leaf_to_rule_map,
    max_rules_per_leaf,
    max_bitmaps,
    max_leafs_per_bitmap,
    redundancy_per_bitmap )

    leaf_count = len(leafs)

    if leaf_count <= max_bitmaps:
        return

    for i in range(max_bitmaps):

        for j in range(max_leafs_per_bitmap, 0, -1):

            bitmap, bitmap_leafs, _ = min_k_union(leafs, j)

            redundancy = sum([popcount(bitmap ^ leaf['bitmap']) for leaf in bitmap_leafs])

            if redundancy <= redundancy_per_bitmap:

                for leaf in bitmap_leafs:

                    leaf['has_bitmap'] = True

                    leaf['~bitmap'] = bitmap ^ leaf['bitmap']

                leafs = set(leafs) - set(bitmap_leafs)

                break

    default_bitmap = 0

    for leaf in leafs:

        if leaf_to_rule_map[leaf] < max_rules_per_leaf:

            leaf['has_rule'] = True

            leaf_to_rule_map[leaf] += 1

        else:

            default_bitmap |= leaf['bitmap']

    for leaf in leafs:

        if ('has_bitmap' and 'has_rule') not in leaf:

            leaf['~bitmap'] = default_bitmap ^ leaf['bitmap']

    return leafs, leaf_to_rule_map, default_bitmap
